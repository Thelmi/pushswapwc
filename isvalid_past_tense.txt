# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    isvalid_past_tense.txt                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mrhelmy <mrhelmy@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/14 12:55:54 by thelmy            #+#    #+#              #
#    Updated: 2024/06/18 00:04:37 by mrhelmy          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "list.h"

t_Node	*is_valid(int ac, char **av)
{
	int	i;
	char	**splitted;
	// int		checked;
	t_Node	*head;
	t_Node	*tmp;
	t_Node	*nextnode;
	int		j;

	i = 1;
	// checked = 1;
	head = NULL;
	if (ac <= 1)
		exit(1);
	while (i < ac)
	{
		if (t_defence(av[i]) && isnot_term(av[i]))
		{
			if (t_strchr(av[i], ' '))
			{
				splitted = ft_split(av[i], ' ');
				j = 0;
				while (splitted[j])
				{
					if (!is_integer(splitted[j]))
					{
						ft_printf("error\n");
						j = 0;
						while (splitted[j])
						{
							free(splitted[j]);
							j++;
						}
						free(splitted);
						freelist(head);
						exit(1);
					}
					j++;
				}
				j = 0;
				if (!head)
				{
					head = create_node(t_atoi(splitted[0]));
					tmp = head;
					j = 1;
				}
				while (splitted[j])
				{
					nextnode = create_node(t_atoi(splitted[j]));
					tmp -> next = nextnode;
					tmp = tmp -> next;
					j++;
				}
				j = 0;
				while (splitted[j])
				{
					free(splitted[j]);
					j++;
				}
				free(splitted);
			}
			else
			{
				if (!head)
				{
					head = create_node(t_atoi(av[i]));
					tmp = head;
				}
				else
				{
					nextnode = create_node(t_atoi(av[i]));
					tmp -> next = nextnode;
					tmp = nextnode;
				}
			}
		}
		else
		{
			ft_printf("error\n");
			freelist(head);
			exit(1);
		}
		i++;
	}
	isdouble(head);
	return (head);
}
